{"version":3,"sources":["static/avatar.jpeg","theme.js","components/Intro.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","palette","primary","main","secondary","Intro","ThemeProvider","Box","height","width","Grid","container","direction","justify","alignItems","item","xs","Typography","variant","component","gutterBottom","loop","Infinity","wrapper","steps","m","Button","size","color","About","py","px","mb","spacing","md","id","src","require","mt","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,qC,wLCa5BC,EAXDC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cCFH,SAASE,IACpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAeP,MAAOA,GAClB,kBAACQ,EAAA,EAAD,CAAKC,OAAO,OAAOC,MAAM,QACrB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,SAASC,WAAW,UAC5D,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,SAASC,WAAW,UACzD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,GAApD,0BAIJ,kBAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKE,cAAY,GAArC,MAEQ,kBAAC,IAAD,CACIC,KAAMC,IACNC,QAAQ,IACRC,MAAO,CAAC,iBAAkB,IAClB,qBAAsB,IACtB,oBAAqB,IACrB,aAAc,IACd,wCAAyC,UAKrE,kBAACd,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,SAASC,WAAW,UACzD,kBAACP,EAAA,EAAD,CAAKkB,EAAG,GACJ,kBAACf,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACX,kBAACU,EAAA,EAAD,CAAQC,KAAK,QAAQT,QAAQ,WAAWU,MAAM,WAA9C,8BC7BrB,SAASC,IACpB,OACI,6BACI,kBAACvB,EAAA,EAAD,CAAeP,MAAOA,GAClB,kBAACQ,EAAA,EAAD,CAAKuB,GAAI,GAAIC,GAAI,IACb,kBAACrB,EAAA,EAAD,CAAMC,WAAS,EAACG,WAAW,UACvB,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACX,kBAACT,EAAA,EAAD,CAAKyB,GAAI,IACL,kBAACf,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAIZ,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACsB,QAAS,GACrB,kBAACvB,EAAA,EAAD,CAAMK,MAAI,EAACmB,GAAI,GACX,kBAAC3B,EAAA,EAAD,KACI,yBAAK4B,GAAG,SAASC,IAAKC,EAAQ,OAElC,kBAAC9B,EAAA,EAAD,CAAK+B,GAAI,GACL,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,KAApB,qIAGR,kBAACR,EAAA,EAAD,CAAMK,MAAI,EAACmB,GAAI,EAAGrB,QAAQ,cACtB,8C,YCTb0B,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACnC,EAAD,OAEF,yBAAKmC,UAAU,aACb,kBAACX,EAAD,SCFYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.665e0824.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.85596822.jpeg\";","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#38AFAD'\n        },\n        secondary: {\n            main: '#32373B'\n        },\n    },\n})\n\nexport default theme;","import React from 'react';\nimport Typical from 'react-typical'\nimport {Typography, Box, Container, Grid, Paper, Button} from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from '../theme'\n\nexport default function Intro() {\n    return (\n        <div>\n            <ThemeProvider theme={theme}>\n                <Box height='100%' width='100%'>\n                    <Grid container direction='column' justify ='center' alignItems='center'>\n                        <Grid container direction='row' justify ='center' alignItems='center'>\n                            <Grid item xs={12}>\n                                <Typography variant='h1' component='h2' gutterBottom>\n                                    Hi, I'm Emmie Ohnuki.\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant='h4' gutterBottom>\n                                    I'm \n                                        <Typical\n                                            loop={Infinity}\n                                            wrapper=\"b\"\n                                            steps={[' a CS student.', 1000, \n                                                    ' an iOS developer.', 1000, \n                                                    ' a web developer.', 1000, \n                                                    ' a hacker.', 1000,\n                                                    ' a programming instructor instructor.', 1000]}\n                                        />\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container direction='row' justify ='center' alignItems='center'>\n                            <Box m={8}>\n                                <Grid item xs={12}>\n                                    <Button size='large' variant='outlined' color='default'>Learn more about me</Button>\n                                </Grid>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </ThemeProvider>\n        </div>\n    )\n}","import React from 'react'\nimport {Typography, Box, Container, Grid, Paper, Button} from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from '../theme'\nimport Avatar from '@material-ui/core/Avatar'\nimport { CardMedia } from '@material-ui/core';\n\nexport default function About() {\n    return(\n        <div>\n            <ThemeProvider theme={theme}>\n                <Box py={10} px={15}>\n                    <Grid container alignItems='center'>\n                        <Grid item xs={12}>\n                            <Box mb={15}>\n                                <Typography variant='h2'>About</Typography>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={6}>\n                        <Grid item md={4}>\n                            <Box>\n                                <img id='avatar' src={require('../static/avatar.jpeg')}/>\n                            </Box>\n                            <Box mt={5}>\n                                <Typography variant='p'>I'm a rising sophomore at University of Massachusetts Amherst double majoring in computer science and mathematical computation.</Typography>\n                            </Box>\n                        </Grid>\n                        <Grid item md={8} justify='flex-start'>\n                            <p>HELLOOOOOO</p>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </ThemeProvider>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Intro from './components/Intro.js'\nimport About from './components/About.js'\nimport Projects from './components/Projects.js'\nimport Current from './components/Current.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Intro></Intro> \n      </header>\n      <div className=\"App-about\">\n        <About></About>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}